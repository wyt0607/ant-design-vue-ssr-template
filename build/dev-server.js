const webpack = require('webpack');
const middleware = require('webpack-dev-middleware');
const FriendlyErrorsPlugin = require('friendly-errors-webpack-plugin')
const merge = require('webpack-merge')
const clientConfig = require('./webpack.client.config')
const serverConfig = require('./webpack.server.config')
const express = require('express');
const MFS = require('memory-fs')
const chokidar = require('chokidar')
const path = require("path")
const fs = require("fs")
const resolve = file => path.resolve(__dirname, file)


const readFile = (fs, file) => {
    try {
        return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
    } catch (e) {
    }
}


const app = express();

const templatePath = resolve('../src/index.template.html')

let bundle
let template
let clientManifest

let ready
const readyPromise = new Promise(r => {
    ready = r
})
const update = () => {
    if (bundle && clientManifest) {
        ready()
        cb(bundle, {
            template,
            clientManifest
        })
    }
}


template = fs.readFileSync(templatePath, 'utf-8')
chokidar.watch(templatePath).on('change', () => {
    template = fs.readFileSync(templatePath, 'utf-8')
    console.log('index.html template updated.')
    update()
})


const devConfig = {
    mode: "development",
    plugins: [
        new FriendlyErrorsPlugin()
    ]
}

clientConfig.entry = ['webpack-hot-middleware/client', clientConfig.entry]
clientConfig.output.filename = '[name].js'
clientConfig.plugins.push(
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin()
)

const clientCompiler = webpack(merge(clientConfig, devConfig));
const devMiddleware = middleware(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    noInfo: true
})

app.use(devMiddleware);
clientCompiler.plugin('done', stats => {
    stats = stats.toJson()
    stats.errors.forEach(err => console.error(err))
    stats.warnings.forEach(err => console.warn(err))
    if (stats.errors.length) return
    clientManifest = JSON.parse(readFile(
        devMiddleware.fileSystem,
        'vue-ssr-client-manifest.json'
    ))
    update()
})
app.use(require('webpack-hot-middleware')(clientCompiler, {heartbeat: 5000}))


/*const serverCompiler = webpack(merge(serverConfig, devConfig));
const mfs = new MFS()
console.log(mfs);
serverCompiler.outputFileSystem = mfs
serverCompiler.watch({}, (err, stats) => {
    if (err) throw err
    stats = stats.toJson()
    if (stats.errors.length) return

    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
    update()
})*/

